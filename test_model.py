import numpy as np
import sg_utils
import caffe

def load_model(model_name, snapshot):
  """
  Load the model from file. Includes pointers to the prototxt file, 
  caffemodel file name, and other settings - image mean, base_image_size, vocab 
  """
  model = sg_utils.load_variables(
  model.net = caffe.Net(model['prototxt_file'], model['caffemodel_file'], caffe.TEST)
  return model

def output_words(detection_file, eval_file, functional_words, threshold_metric, output_metric):
  """
  Output the words as generated by the model.
  """

def test_model(imdb, model, detection_file = None):
  """
  Tests model and stores detections on disk
  """
  N_WORDS = len(model['vocab']['words'])
  sc = np.zeros((imdb.num_images, N_WORDS), dtype=np.float)
  prob = np.zeros((imdb.num_images, N_WORDS), dtype=np.float)
  for i in xrange(len(imdb.image_index)):
    im = []
    sc[i,:], prob[i,:] = test_img(im, net, model['base_image_size'], model['means'])

  sg_utils.save_variables(detection_file, [sc, prob, vocab, imdb, snapshot],
    ['sc', 'prob', 'vocab', 'imdb', 'snapshot'], overwrite = True)

def benchmark(imdb, gtdb, detection_file, eval_file = None):
  # Get ground truth
  # counts = get_vocab_counts(imdb.image_index, coco_caps, max_cap, vocab)
  
  # Benchmark the output, and return a result struct


def test_img(im, net, base_image_size, means):
  """
  Calls Caffe to get output for this image
  """
  # Resize image

  # Subtract mean

  # Permute Axis

  # Pass into Caffe

  # Get outputs and return them 
